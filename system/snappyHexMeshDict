// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class dictionary;
 object snappyHexMeshDict;
}

castellatedMesh yes;
snap yes;
addLayers no;
geometry
{
  wall_aorta.stl
  {
    type triSurfaceMesh;
    file "wall_aorta.stl";
    name wall_aorta;
  }
  inlet.stl
  {
    type triSurfaceMesh;
    file "inlet.stl";
    name inlet;
  }
  outlet1.stl
  {
    type triSurfaceMesh;
    file "outlet1.stl";
    name outlet1;
  }
  outlet2.stl
  {
    type triSurfaceMesh;
    file "outlet2.stl";
    name outlet2;
  }
  outlet3.stl
  {
    type triSurfaceMesh;
    file "outlet3.stl";
    name outlet3;
  }
  outlet4.stl
  {
    type triSurfaceMesh;
    file "outlet4.stl";
    name outlet4;
  }
} 	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMeshControls
{
  maxLocalCells 50000000;
  maxGlobalCells 100000000;
  minRefinementCells 0;
  nCellsBetweenLevels 1; 	//[1]This parameter controls the transition between cell refinement levels
  features
    (

      {
        file "wall_aorta.eMesh";
        level 1; 	//[2]control edge refinement level

      }

      {
        file "inlet.eMesh";
        level 1;

      }

      {
        file "outlet1.eMesh";
        level 1;

      }

      {
        file "outlet2.eMesh";
        level 1;

      }

      {
        file "outlet3.eMesh";
        level 1;

      }

      {
        file "outlet4.eMesh";
        level 1;

      }
    );
  refinementSurfaces
  {
    wall_aorta
    {
      level (1 2);
    }
    inlet
    {
      level (1 2);
    } 	//[3]To control surface refinement.
    outlet1
    {
      level (1 2);
    }
    outlet2
    {
      level (1 2);
    }
    outlet3
    {
      level (1 2);
    }
    outlet4
    {
      level (1 2);
    }
  }
  resolveFeatureAngle 50; 	//[4]This parameter controls the local curvature refinement.
  refinementRegions
  {
  }
  locationInMesh (-2 193 -130); 	//[5]Point location inside STL
  allowFreeStandingZoneFaces no;
} 	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

snapControls
{
  nSmoothPatch 0;
  tolerance 1.0;
  nSolveIter 100; 	//[6]The higher the value the better the body fitted mesh.
  nRelaxIter 20; 	//[7]Increase this value to improve the quality of the body fitted mesh.
  nFeatureSnapIter 20; 	//[8]Increase this value to improve the quality of the edge features.
  implicitFeatureSnap no;
  explicitFeatureSnap yes;
  multiRegionFeatureSnap no;
}

addLayersControls
{
  relativeSizes no;
  layers
  {
    "wall_aorta.*"
    {
      nSurfaceLayers 1;
    }
  } 	// Are the thickness parameters below relative to the undistorted//[9]size of the refined cell outside layer (true) or absolute sizes (false).//[10]number of addlayer
  expansionRatio 1.2; 	//[11]expension factor //finalLayerThickness 0.5;
  firstLayerThickness 0.025; 	//[12]first layer thickness
  minThickness 0.01; 	//[13]minimum Thickness
  nGrow 0;
  featureAngle 100;
  nRelaxIter 5;
  nSmoothSurfaceNormals 1;
  nSmoothNormals 3;
  nSmoothThickness 10;
  maxFaceThicknessRatio 0.5;
  maxThicknessToMedialRatio 0.3;
  minMedianAxisAngle 90;
  nBufferCellsNoExtrude 0;
  nLayerIter 50;
  nRelaxedIter 20;
}

meshQualityControls
{
#include "meshQualityDict"
  minTriangleTwist -1;
  relaxed
  {
    maxNonOrtho 75;
  } 	//[14]Maximum non-orthogonality angle.
}

writeFlags
  (
    scalarLevels
    layerSets
    layerFields
  ); 	// write volScalarField with cellLevel for postprocessing// write cellSets, faceSets of faces in layer// write volScalarField for layer coverage// Merge tolerance. Is fraction of overall bounding box of initial mesh.// Note: the write tolerance needs to be higher than this.

mergeTolerance 1e-06; 	// ************************************************************************* //

